apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "app.fullname" . }}
  labels:
    app: {{ template "app.name" . }}
    chart: {{ template "app.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
{{- if .Values.deployment.annotations }}
{{ toYaml .Values.deployment.annotations | indent 4 }}
{{- end }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  revisionHistoryLimit: {{ default 3 .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "app.name" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
{{- if .Values.deployment.template.annotations }}
{{ toYaml .Values.deployment.template.annotations | indent 8 }}
{{- end }}
    spec:
      {{- if or (.Values.volumes) (.Values.secretVolumes) }}
      volumes:
      {{- if .Values.secretVolumes }}
      {{- range .Values.secretVolumes }}
        - name: {{ .volumeName }}
          secret: 
            secretName: {{ .secretName }}
      {{- end }} 
      {{- end }}
      {{- if .Values.volumes }}
{{ toYaml .Values.volumes | indent 8 }}
      {{- end }}
      {{- end }}
      {{- if .Values.imageCredentials }}
      imagePullSecrets:
        - name: {{ template "app.fullname" $ }}-registrykey
      {{- end }}
      {{- if .Values.migration.enabled }}
      initContainers:
        - name: {{ .Chart.Name }}-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ template "app.fullname" $ }}-env
{{- if .Values.migration.command }}
          command:
{{ toYaml .Values.migration.command | indent 12 }}
{{- end }}
{{- if .Values.migration.args }}
          args:
{{ toYaml .Values.migration.args | indent 12 }}
          {{- end }}
{{- if .Values.secrets }}
          env:
          {{- range .Values.secrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .ref.name }}
                  key: {{ .ref.key }}
          {{- end }}
          {{- end }}
  {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.command }}
          command:
{{ toYaml .Values.command | indent 12 }}
{{- end }}
{{- if .Values.args }}
          args:
{{ toYaml .Values.args | indent 12 }}
{{- end }}
          {{- if .Values.secrets }}
          env:
          {{- range .Values.secrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .ref.name }}
                  key: {{ .ref.key }}
          {{- end }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "app.fullname" $ }}-env
          {{- if or (.Values.volumeMounts) (.Values.secretVolumes) }}
          volumeMounts:
          {{- if .Values.secretVolumes }}
          {{- range .Values.secretVolumes }}
            - name: {{ .volumeName }}
              mountPath: {{ .mountPath }}
          {{- end }} 
          {{- end }}
          {{- if .Values.volumeMounts }}
{{ toYaml .Values.volumeMounts | indent 12 }}
          {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.internalPort | default "80" }}
              protocol: TCP
            # Port for debug, prometheus etc
            {{- if .Values.debugService.enabled }}
            - name: debug
              containerPort: {{ .Values.debugService.internalPort }}
              protocol: TCP
            {{- end }}
          {{- if .Values.probes.enabled }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds | default 1 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path | default "/" }}
              port: {{ .Values.probes.liveness.port | default "http" }}
              scheme: {{ .Values.probes.liveness.scheme | default "HTTP" }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path | default "/" }}
              port: {{ .Values.probes.readiness.port | default "http" }} 
              scheme: {{ .Values.probes.readiness.scheme | default "HTTP" }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
